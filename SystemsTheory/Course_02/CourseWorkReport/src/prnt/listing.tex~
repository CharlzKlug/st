\Csection{Текст программы}

\begin{lstlisting}[style=customoz, caption=widget.h]
#ifndef WIDGET_H
#define WIDGET_H

#include <QWidget>
#include <QPainter>
#include <math.h>
#include <QPushButton>
#include <QVBoxLayout>
#include <QGroupBox>
#include <QSlider>
#include <QLabel>
#include "Object3D.h"
#include "Autopilot.h"
#include <QComboBox>

// Основной класс
class Widget : public QWidget
{
    Q_OBJECT
private:
    // Слайдер поворота вокруг оси Z
    QSlider * aroundZSlider;
    QLabel * zAngleLabel;

    // Слайдер поворота вокруг оси X
    QSlider * aroundXSlider;
    QLabel * xAngleLabel;

    // Слайдер поворота вокруг оси Y
    QSlider * aroundYSlider;
    QLabel * yAngleLabel;

    // Трёхмерный объект
    Object3D * object3d;

    // Клавиша запуска автопилота
    QPushButton * autoPilotButton;

    // Объект автопилота
    Autopilot * myAutopilot;

    // Тред для автопилота
    QThread * myThread;

    // Отображение включённости автопилота
    bool autopilotIsEnabled;

    // ComboBox с трёхмерными фигурами
    QComboBox * shapeComboBox;

    // Процедура установки нового объекта
    void setNewObject();
public:
    Widget(QWidget *parent = 0);
    void paintEvent(QPaintEvent *);
    ~Widget();
public  slots:

    // Реакция на изменение слайдера с углом Z
    void sliderZchanged(int value);

    // Реакция на изменение слайдера с углом X
    void sliderXchanged(int value);

    // Реакция на изменение слайдера с углом Y
    void sliderYchanged(int value);

    // Реакция на нажатие клавиши автопилота
    void buttonAutopilotPressed();

    // Реакция на сигнал с новыми углами поворотов от автопилота
    void autopilotDatas(qreal XAngle,
                        qreal YAngle,
                        qreal ZAngle);

    // Реакция на выбор фигуры из ComboBox-а
    void selectShape();

    // Реакция на паузу автопилота
    void autopilotPaused();
};

#endif // WIDGET_H
\end{lstlisting}

\begin{lstlisting}[style=customoz, caption=widget.cpp]
#include "widget.h"

// Конструктор главного объекта
Widget::Widget(QWidget *parent)
    : QWidget(parent)
{
    this->setStyleSheet("background: black;");
    autopilotIsEnabled = false;
    QGroupBox * controlPanel = new QGroupBox(tr("Control panel"));
    QVBoxLayout * controlPanelLayout = new QVBoxLayout;

    // Слайдер для вращения вокруг оси Z
    aroundZSlider = new QSlider(Qt::Horizontal, controlPanel);
    aroundZSlider->setMinimum(0);
    aroundZSlider->setMaximum(360);
    aroundZSlider->setValue(0);
    zAngleLabel = new QLabel("Z angle: " +
                             QString::number(aroundZSlider->value()),
                             controlPanel);
    connect(aroundZSlider, SIGNAL(valueChanged(int)), this,
            SLOT(sliderZchanged(int)));

    // Слайдер для вращения вокруг оси X
    aroundXSlider = new QSlider(Qt::Horizontal, controlPanel);
    aroundXSlider->setMinimum(0);
    aroundXSlider->setMaximum(360);
    aroundXSlider->setValue(0);
    xAngleLabel = new QLabel("X angle: " + QString::number(aroundXSlider->value()),
                             controlPanel);
    connect(aroundXSlider, SIGNAL(valueChanged(int)), this,
            SLOT(sliderXchanged(int)));

    // Слайдер для вращения вокруг оси Y
    aroundYSlider = new QSlider(Qt::Horizontal, controlPanel);
    aroundYSlider->setMinimum(0);
    aroundYSlider->setMaximum(360);
    aroundYSlider->setValue(0);
    yAngleLabel = new QLabel("Y angle: " + QString::number(aroundYSlider->value()),
                             controlPanel);
    connect(aroundYSlider, SIGNAL(valueChanged(int)), this,
            SLOT(sliderYchanged(int)));

    // Клавиша автопилота
    autoPilotButton = new QPushButton("Enable autopilot", controlPanel);
    connect(autoPilotButton, SIGNAL(clicked()), SLOT(buttonAutopilotPressed()));

    // Задание выпадающего списка с фигурами
    shapeComboBox = new QComboBox;
    shapeComboBox->addItem("Cube");
    shapeComboBox->addItem("Pyramid");
    shapeComboBox->addItem("Star");
    connect(shapeComboBox, SIGNAL(currentIndexChanged(int)), SLOT(selectShape()));

    // Задание фигуры
    qreal cubeDots[8][3] = {{50, -50, -50}, {50, -50, 50},
                            {50, 50, 50}, {50, 50, -50},
                            {-50, -50, -50}, {-50, -50, 50},
                            {-50, 50, 50}, {-50, 50, -50}};
    int cubeLinks[] = {0, 1, 0, 4, 0, 3, 1, 2, 1, 5, 2, 6, 2, 3, 3, 7, 5, 6, 5, 4,
                       6, 7, 4, 7};
    object3d = new Object3D(&cubeDots[0][0], 8, &cubeLinks[0], 24);

    // Добавление виджетов на слой компоновки
    controlPanelLayout->addWidget(zAngleLabel);
    controlPanelLayout->addWidget(aroundZSlider);

    controlPanelLayout->addWidget(xAngleLabel);
    controlPanelLayout->addWidget(aroundXSlider);

    controlPanelLayout->addWidget(yAngleLabel);
    controlPanelLayout->addWidget(aroundYSlider);

    controlPanelLayout->addWidget(autoPilotButton);

    controlPanelLayout->addWidget(shapeComboBox);
    controlPanel->setLayout(controlPanelLayout);
    controlPanel->show();
}

void Widget::buttonAutopilotPressed(){
    // Реакция на нажатие клавиши автопилота
    if (autopilotIsEnabled) {
        // Если автопилот уже был запущен
        myAutopilot->stop();
        aroundXSlider->setEnabled(true);
        aroundYSlider->setEnabled(true);
        aroundZSlider->setEnabled(true);
        autoPilotButton->setText("Enable autopilot");
        autopilotIsEnabled = false;
    }
    else {
        // Если автопилот не был запущен
        myThread = new QThread;
        myAutopilot = new Autopilot(object3d->getAngleX(),
                                    object3d->getAngleY(),
                                    object3d->getAngleZ());
        myAutopilot->moveToThread(myThread);
        connect(myAutopilot, SIGNAL(newAngles(qreal,qreal,qreal)),
                SLOT(autopilotDatas(qreal,qreal,qreal)));
        connect(myAutopilot, SIGNAL(pausedSignal()),
                SLOT(autopilotPaused()));
        connect(myThread, SIGNAL(started()), myAutopilot,
                SLOT(start()));
        connect(myAutopilot, SIGNAL(finished()), myThread,
                SLOT(quit()));
        connect(myAutopilot, SIGNAL(finished()), myAutopilot,
                SLOT(deleteLater()));
        connect(myThread, SIGNAL(finished()), myThread,
                SLOT(deleteLater()));
        aroundXSlider->setEnabled(false);
        aroundYSlider->setEnabled(false);
        aroundZSlider->setEnabled(false);

        // Смена раскраски слайдеров
        QPalette disablePalette = aroundXSlider->palette();
        disablePalette.setColor(QPalette::Disabled,
                                QPalette::Light,
                                QColor(128, 128, 128));
        aroundXSlider->setPalette(disablePalette);
        aroundYSlider->setPalette(disablePalette);
        aroundZSlider->setPalette(disablePalette);
        autoPilotButton->setText("Disable autopilot");
        myThread->start();
        autopilotIsEnabled=true;
    }
}

void Widget::paintEvent(QPaintEvent *){
    // Процедура отрисовки окна с изображением
    this->setWindowTitle("Width: " +
                         QString::number(this->width()) +
                         " Height: " +
                         QString::number(this->height()));
    QPainter painter(this);
    painter.setPen(Qt::blue);
    qreal windowHalfHeight = this->height()/2,
            windowHalfWidth = this->width()/2;
    int firstDot, secondDot;

    // Отрисовка трёхмерного объекта
    for (int i = 0; i < object3d->getLinksCount(); i++){
        firstDot = object3d->getLinkFirstDot(i);
        secondDot = object3d->getLinkSecondDot(i);
        painter.drawLine(QPoint(object3d->getY(firstDot) +
                                windowHalfWidth,
                                object3d->getX(firstDot) +
                                windowHalfHeight),
                         QPoint(object3d->getY(secondDot) +
                                windowHalfWidth,
                                object3d->getX(secondDot) +
                                windowHalfHeight));
    }
}

Widget::~Widget()
{
    // Деструктор виджета
}

void Widget::sliderZchanged(int value){
    // Реакция на изменение слайдера с углом Z
    zAngleLabel->setText("Z angle: " +
                         QString::number(value));
    object3d->setZAngle(value*3.14/180);
    update();
}

void Widget::sliderXchanged(int value){
    // Реакция на изменение слайдера с углом X
    xAngleLabel->setText("X angle: " +
                         QString::number(value));
    object3d->setXAngle(value*3.14/180);
    update();
}

void Widget::sliderYchanged(int value){
    // Реакция на изменение слайдера с углом Y
    yAngleLabel->setText("Y angle: " +
                         QString::number(value));
    object3d->setYAngle(value*3.14/180);
    update();
}

void Widget::autopilotDatas(qreal XAngle, qreal YAngle, qreal ZAngle){
    // Реакция на сигнал с новыми углами поворотов от автопилота
    object3d->setXAngle(XAngle);
    object3d->setYAngle(YAngle);
    object3d->setZAngle(ZAngle);
    aroundXSlider->setValue((((int)(XAngle * 180 / 3.14) % 360)+360)%360);
    aroundYSlider->setValue((((int)(YAngle * 180 / 3.14) % 360)+360)%360);
    aroundZSlider->setValue((((int)(ZAngle * 180 / 3.14) % 360)+360)%360);
    update();
}

void Widget::selectShape(){
    // Реакция на выбор фигуры из ComboBox-а
    if (!autopilotIsEnabled){
        setNewObject();
    }
    else myAutopilot->pauseOnOff();
}

void Widget::setNewObject(){
    // Процедура установки нового объекта в myObject
    switch (shapeComboBox->currentIndex()) {
    case 0:
    {
        // Реализация трёхмерного объекта "Куб"
        qreal cubeDots[8][3] = {{50, -50, -50}, {50, -50, 50}, {50, 50, 50},
                                {50, 50, -50}, {-50, -50, -50}, {-50, -50, 50},
                                {-50, 50, 50}, {-50, 50, -50}};
        int cubeLinks[] = {0, 1, 0, 4, 0, 3, 1, 2, 1, 5, 2, 6,
                           2, 3, 3, 7, 5, 6, 5, 4, 6, 7, 4, 7};
        object3d->setObject(&cubeDots[0][0], 8, &cubeLinks[0], 24);
        update();
    }
        break;
    case 1:
    {
        // Реализация трёхмерного объекта "Пирамида"
        qreal tetraDots[4][3] = {{0, 0, 100}, {0, -100, 0}, {-50, 50, 0},
                                 {50, 50, 0}};

        int tetraLinks[] = {0, 1, 0, 2, 0, 3, 1, 0, 1, 2, 1, 3, 2, 0, 2, 1,
                            2, 3, 3, 0, 3, 1, 3, 2};
        object3d->setObject(&tetraDots[0][0], 4, &tetraLinks[0], 24);
        update();
    }
        break;
    case 2:
    {
        qreal starDots[12][3] = {{200, 0, 0}, {60, 190, 0}, {-160, 116, 0},
                                 {-160, -116, 0}, {60, -190, 0}, {60, 44, 0},
                                 {-22, 72, 0}, {-76, 0, 0}, {-22, -72, 0},
                                 {60, -44, 0}, {0, 0, 25}, {0, 0, -25}};
        int starLinks[] = {0, 5, 0, 10, 0, 11, 0, 9, 1, 5, 1, 6, 1, 11,
                          1, 10, 2, 6, 2, 7, 2, 11, 2, 10, 3, 7, 3, 8,
                          3, 11, 3, 10, 4, 8, 4, 9, 4, 11, 4, 10, 5, 11,
                          5, 10, 6, 11, 6, 10, 7, 11, 7, 10, 8, 11, 8, 10,
                          9, 11, 9, 10};
        object3d->setObject(&starDots[0][0], 12, &starLinks[0], 60);
        update();

    }
        break;
    default:
        break;
    }
}

void Widget::autopilotPaused(){
    // Смена объекта при паузе автопилота
    setNewObject();
    myAutopilot->pauseOnOff();
}
\end{lstlisting}

\begin{lstlisting}[style=customoz, caption=Object3D.h]
#ifndef OBJECT3D_H
#define OBJECT3D_H
#include <QtGlobal>
#include <cmath>

const int three = 3, two = 2, zero = 0;

// Класс трёхмерного объекта
class Object3D{
private:
    qreal ** objectDots; // Координаты (x, y, z)
    int dotsCount; // Количество точек
    int *dotsLinks; // Взаимосвязи точек (1 соединяется с 2 и т.д.)
    int linksCount; // Количество связей
    qreal angleZ; // Поворот вокруг оси Z (радианы)
    qreal angleX; // Поворот вокруг оси X (радианы)
    qreal angleY; // Поворот вокруг оси Y (радианы)
    qreal maxD; // Дистанция от начала координат то самой удалённой точки

    // Расстояние от центра до самой удалённой точки 3Д объекта
    qreal maxDistance();
    // Сброс данных (при смене фигуры), углы сохраняются
    void resetObject();

public:
    // Конструктор, dots - массив точек, r - количество точек
    // links - связи между точками, linksCount - количество связей
    Object3D(qreal *dots, int r, int * links, int totalLinksCount);

    // Возврат координаты X какой-либо точки. Отсчёт от 0.
    qreal getX(int dotNumber);

    // Возврат координаты Y какой-либо точки. Отсчёт от 0.
    qreal getY(int dotNumber);

    // Возврат координаты Z какой-либо точки. Отсчёт от 0.
    qreal getZ(int dotNumber);

    // Вернуть количество связей. Отсчёт от 1.
    int getLinksCount();

    // Вернуть количество точек. Отсчёт от 1.
    int getDotsCount();

    // Вернуть номер первой точки из связи
    int getLinkFirstDot(int linkNumber);

    // Вернуть номер второй точки из связи
    int getLinkSecondDot(int linkNumber);

    // Установить поворот вокруг оси Z (в радианах)
    void setZAngle(qreal angle);

    // Установить поворот вокруг оси X (в радианах)
    void setXAngle(qreal angle);

    // Установить поворот вокруг оси Y (в радианах)
    void setYAngle(qreal angle);

    // Возращение углов поворота вокруг осей
    qreal getAngleZ();
    qreal getAngleX();
    qreal getAngleY();

    // Возвращает максимальную дистанцию
    qreal getMaxDistance();

    // Установка нового объекта
    void setObject(qreal *, int, int *, int);
};

#endif // OBJECT3D_H
\end{lstlisting}

\begin{lstlisting}[style=customoz, caption=Object3D.cpp]
#include "Object3D.h"

Object3D::Object3D(qreal *dots, int r, int * links,
                   int totalLinksCount){
    // Конструктор объекта
    // Загружаем координаты точек объекта
    objectDots = new qreal * [r];
    dotsCount = r;
    for (int j = zero; j < r; j++){
        objectDots[j] = new qreal [three];
        for (int i = zero; i < three; i++)
            objectDots[j][i] = dots[j*three + i];
    }

    // Загружаем связи точек
    dotsLinks = new int [totalLinksCount];
    linksCount = totalLinksCount / 2;
    for (int j = zero; j < totalLinksCount; j++){
        dotsLinks[j] = links[j];
    }

    // Выставление начальных углов
    setXAngle(0);
    setYAngle(0);
    setZAngle(0);

    // Дистанция от начала координат до дальней точки
    maxD = maxDistance();
}

qreal Object3D::getX(int dotNumber){
    // Возврат координаты X какой-либо точки
    if (dotNumber <= dotsCount - 1)
        return (objectDots[dotNumber][0] * cos (angleZ) -
                objectDots[dotNumber][1] * sin(angleZ)) * cos (angleY) +
                objectDots[dotNumber][2] * sin(angleY);
    else
        return zero;
}

qreal Object3D::getY(int dotNumber){
    // Возврат координаты Y какой-либо точки
    if (dotNumber <= dotsCount - 1)
        return (objectDots[dotNumber][1] * cos(angleZ) +
                objectDots[dotNumber][0] * sin(angleZ)) * cos(angleX) -
                objectDots[dotNumber][2] * sin(angleX);
    else
        return zero;
}

qreal Object3D::getZ(int dotNumber){
    // Возврат координаты Z какой-либо точки
    if (dotNumber <= dotsCount - 1)
        return (objectDots[dotNumber][2] * cos(angleX) +
                objectDots[dotNumber][1] * sin(angleX)) * cos(angleY) -
                objectDots[dotNumber][0] * sin(angleY);
    else
        return zero;
}

int Object3D::getLinksCount(){
    // Возврат количества связей
    return linksCount;
}

int Object3D::getDotsCount(){
    // Возврат количества точек
    return dotsCount;
}

int Object3D::getLinkFirstDot(int linkNumber){
    // Возврат номера первой точки из связи
    if (linkNumber <= linksCount - 1 && linkNumber >= 0)
        return dotsLinks[linkNumber * 2];
    else
        return -1;
}

int Object3D::getLinkSecondDot(int linkNumber){
    // Возврат номера второй точки из связи
    if (linkNumber <= linksCount - 1 && linkNumber >= 0)
        return dotsLinks[linkNumber * 2 + 1];
    else
        return -1;
}

void Object3D::setZAngle(qreal angle){
    // Установка угла поворота вокруг оси Z
    angleZ = angle;
}

void Object3D::setXAngle(qreal angle){
    // Установка угла поворота вокруг оси X
    angleX = angle;
}

void Object3D::setYAngle(qreal angle){
    // Установка угла поворота вокруг оси Y
    angleY = angle;
}

qreal Object3D::maxDistance()
{
    // Вычисление дистанции от начала координат до дальней точки
    qreal distance = 0, temp;

    for (int i = 0; i < dotsCount; i++){
        temp = sqrt(getX(i)*getX(i) + getY(i)*getY(i) + getZ(i)*getZ(i));
        if (temp > distance) distance = temp;
    }
    return distance;
}

qreal Object3D::getMaxDistance()
{
    // Возврат дистанции от начала координат до дальней точки
    return maxD;
}

qreal Object3D::getAngleX(){
    // Возврат угла поворота вокруг оси X
    return angleX;}

qreal Object3D::getAngleY(){
    // Возврат угла поворота вокруг оси Y
    return angleY;}

qreal Object3D::getAngleZ(){
    // Возврат угла поворота вокруг оси Z
    return angleZ;}

void Object3D::resetObject(){
    // Сброс данных объекта
    delete [] objectDots;
    dotsCount = 0;
    delete [] dotsLinks;
    linksCount = 0;
    maxD = 0;
}

void Object3D::setObject(qreal * dots, int r, int * links, int totalLinksCount){
    // Установка нового объекта
    // Загружаем координаты точек объекта
    objectDots = new qreal * [r];
    dotsCount = r;
    for (int j = zero; j < r; j++){
        objectDots[j] = new qreal [three];
        for (int i = zero; i < three; i++)
            objectDots[j][i] = dots[j*three + i];
    }

    // Загружаем связи точек
    dotsLinks = new int [totalLinksCount];
    linksCount = totalLinksCount / 2;
    for (int j = zero; j < totalLinksCount; j++){
        dotsLinks[j] = links[j];
    }
    maxD = maxDistance();
}
\end{lstlisting}

\begin{lstlisting}[style=customoz, caption=Autopilot.h]
#ifndef AUTOPILOT_H
#define AUTOPILOT_H
#include <QObject>
#include <ctime>
#include <QThread>
#include "Sleeper.h"

// Класс автопилота
class Autopilot : public QObject{
    Q_OBJECT
private:
    qreal startXAngle, startYAngle, startZAngle; // Начальные углы по осям
    qreal vX, vY, vZ; // Скорость изменения угла в секунду
    bool enabled; // Запущен ли процесс
    bool paused; // Приостановлен ли процесс
    qreal generateSpeed(); // Генерация угловых скоростей
    qreal currentSeconds; // Текущее время от начала работы
    void process(); // Основной рабочий процесс автопилота
public:
    // Конструктор
    Autopilot(qreal XAngle, qreal YAngle, qreal ZAngle);

    // Деструктор
    ~Autopilot();

public slots:
    // Слот запуска процесса
    void start();

    // Слот останова процесса
    void stop();

    // Слот паузы вкл/выкл
    void pauseOnOff();
signals:

    // Сигнал с новыми углами
    void newAngles(qreal XAngle, qreal YAngle, qreal ZAngle);

    // Сигнал завершения работы автопилота
    void finished();

    // Сигнал о вставании на паузу
    void pausedSignal();
};
#endif // AUTOPILOT_H
\end{lstlisting}

\begin{lstlisting}[style=customoz, caption=Autopilot.cpp]
#include "Autopilot.h"

Autopilot::Autopilot(qreal XAngle,
                     qreal YAngle,
                     qreal ZAngle){
    // Конструктор автопилота
    std::srand(std::time(0) * 29);
    startXAngle = XAngle;
    startYAngle = YAngle;
    startZAngle = ZAngle;
    vX = generateSpeed();
    vY = generateSpeed();
    vZ = generateSpeed();
    currentSeconds = 0;
    enabled = false;
    paused = false;
}

Autopilot::~Autopilot(){
    // Деструктор автопилота
}

qreal Autopilot::generateSpeed(){
    // Генерация новой скорости
    return std::rand() * 3.14 / RAND_MAX-1.57;
}

void Autopilot::start(){
    // Запуск автопилота
    enabled = true;
    process();
}

void Autopilot::stop(){
    // Останов автопилота
    enabled = false;
}

void Autopilot::pauseOnOff(){
    // Пауза автопилота вкл/выкл
    if (paused) paused = false;
    else {
        paused = true;
        emit pausedSignal();
    }
}

void Autopilot::process(){
    // Основной процесс автопилота
    while (enabled){
        if (!paused){
            Sleeper::msleep(100);
            currentSeconds += 0.1;
            emit newAngles(vX*currentSeconds + startXAngle,
                           vY*currentSeconds + startYAngle,
                           vZ*currentSeconds + startZAngle);}
        else Sleeper::msleep(100);
    }
    emit finished();
}
\end{lstlisting}

\begin{lstlisting}[style=customoz, caption=Sleeper.h]
#ifndef SLEEPER_H
#define SLEEPER_H
#include <QThread>

// Объект паузы в процессе работы треда
class Sleeper : public QThread
{
public:
    static void usleep(unsigned long usecs){QThread::usleep(usecs);}
    static void msleep(unsigned long msecs){QThread::msleep(msecs);}
    static void sleep(unsigned long secs){QThread::sleep(secs);}
};
#endif // SLEEPER_H
\end{lstlisting}

\begin{lstlisting}[style=customoz, caption=main.cpp]
#include "widget.h"
#include "Object3D.h"
#include <QApplication>

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);

    Widget w;
    w.show();
    return a.exec();
}
\end{lstlisting}
